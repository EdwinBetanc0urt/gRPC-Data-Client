/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.data.CalloutRequest', null, global);
goog.exportSymbol('proto.data.CalloutResponse', null, global);
goog.exportSymbol('proto.data.ClientRequest', null, global);
goog.exportSymbol('proto.data.Condition', null, global);
goog.exportSymbol('proto.data.Condition.Operator', null, global);
goog.exportSymbol('proto.data.Criteria', null, global);
goog.exportSymbol('proto.data.KeyValue', null, global);
goog.exportSymbol('proto.data.OrderByProperty', null, global);
goog.exportSymbol('proto.data.OrderByProperty.OrderType', null, global);
goog.exportSymbol('proto.data.ProcessActivityRequest', null, global);
goog.exportSymbol('proto.data.ProcessInfoLog', null, global);
goog.exportSymbol('proto.data.ProcessOutput', null, global);
goog.exportSymbol('proto.data.ProcessRequest', null, global);
goog.exportSymbol('proto.data.ProcessRequestParameter', null, global);
goog.exportSymbol('proto.data.ProcessResponse', null, global);
goog.exportSymbol('proto.data.ProcessResponseList', null, global);
goog.exportSymbol('proto.data.Selection', null, global);
goog.exportSymbol('proto.data.Value', null, global);
goog.exportSymbol('proto.data.Value.ValueType', null, global);
goog.exportSymbol('proto.data.ValueObject', null, global);
goog.exportSymbol('proto.data.ValueObjectList', null, global);
goog.exportSymbol('proto.data.ValueObjectRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ClientRequest.displayName = 'proto.data.ClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ValueObjectList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ValueObjectList.repeatedFields_, null);
};
goog.inherits(proto.data.ValueObjectList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ValueObjectList.displayName = 'proto.data.ValueObjectList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ValueObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ValueObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ValueObject.displayName = 'proto.data.ValueObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.KeyValue.displayName = 'proto.data.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Value.displayName = 'proto.data.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ValueObjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ValueObjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ValueObjectRequest.displayName = 'proto.data.ValueObjectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Criteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.Criteria.repeatedFields_, null);
};
goog.inherits(proto.data.Criteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Criteria.displayName = 'proto.data.Criteria';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.OrderByProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.OrderByProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.OrderByProperty.displayName = 'proto.data.OrderByProperty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.Condition.repeatedFields_, null);
};
goog.inherits(proto.data.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Condition.displayName = 'proto.data.Condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.CalloutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.CalloutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.CalloutRequest.displayName = 'proto.data.CalloutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.CalloutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.CalloutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.CalloutResponse.displayName = 'proto.data.CalloutResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ProcessRequest.repeatedFields_, null);
};
goog.inherits(proto.data.ProcessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessRequest.displayName = 'proto.data.ProcessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessRequestParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ProcessRequestParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessRequestParameter.displayName = 'proto.data.ProcessRequestParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessActivityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ProcessActivityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessActivityRequest.displayName = 'proto.data.ProcessActivityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.Selection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.Selection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.Selection.displayName = 'proto.data.Selection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessResponseList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ProcessResponseList.repeatedFields_, null);
};
goog.inherits(proto.data.ProcessResponseList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessResponseList.displayName = 'proto.data.ProcessResponseList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.data.ProcessResponse.repeatedFields_, null);
};
goog.inherits(proto.data.ProcessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessResponse.displayName = 'proto.data.ProcessResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessInfoLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ProcessInfoLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessInfoLog.displayName = 'proto.data.ProcessInfoLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data.ProcessOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data.ProcessOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data.ProcessOutput.displayName = 'proto.data.ProcessOutput';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ClientRequest.toObject = function(includeInstance, msg) {
  var obj = {
    sessionuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    language: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ClientRequest}
 */
proto.data.ClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ClientRequest;
  return proto.data.ClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ClientRequest}
 */
proto.data.ClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionuuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sessionUuid = 1;
 * @return {string}
 */
proto.data.ClientRequest.prototype.getSessionuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ClientRequest.prototype.setSessionuuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string language = 2;
 * @return {string}
 */
proto.data.ClientRequest.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ClientRequest.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ValueObjectList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ValueObjectList.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ValueObjectList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ValueObjectList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ValueObjectList.toObject = function(includeInstance, msg) {
  var obj = {
    recordcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.data.ValueObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ValueObjectList}
 */
proto.data.ValueObjectList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ValueObjectList;
  return proto.data.ValueObjectList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ValueObjectList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ValueObjectList}
 */
proto.data.ValueObjectList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordcount(value);
      break;
    case 2:
      var value = new proto.data.ValueObject;
      reader.readMessage(value,proto.data.ValueObject.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ValueObjectList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ValueObjectList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ValueObjectList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ValueObjectList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.data.ValueObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 recordCount = 1;
 * @return {number}
 */
proto.data.ValueObjectList.prototype.getRecordcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ValueObjectList.prototype.setRecordcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ValueObject records = 2;
 * @return {!Array<!proto.data.ValueObject>}
 */
proto.data.ValueObjectList.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.data.ValueObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.ValueObject, 2));
};


/** @param {!Array<!proto.data.ValueObject>} value */
proto.data.ValueObjectList.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.data.ValueObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.ValueObject}
 */
proto.data.ValueObjectList.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.data.ValueObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ValueObjectList.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ValueObject.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ValueObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ValueObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ValueObject.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ValueObject}
 */
proto.data.ValueObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ValueObject;
  return proto.data.ValueObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ValueObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ValueObject}
 */
proto.data.ValueObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 4:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ValueObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ValueObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ValueObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ValueObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.data.ValueObject.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ValueObject.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.data.ValueObject.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ValueObject.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tableName = 3;
 * @return {string}
 */
proto.data.ValueObject.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ValueObject.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, Value> values = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.ValueObject.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.ValueObject.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.data.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.KeyValue.toObject = function(includeInstance, msg) {
  var obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.data.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.KeyValue}
 */
proto.data.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.KeyValue;
  return proto.data.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.KeyValue}
 */
proto.data.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.data.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.KeyValue.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {?proto.data.Value}
 */
proto.data.KeyValue.prototype.getValue = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 2));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.KeyValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.KeyValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.KeyValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Value.toObject = function(includeInstance, msg) {
  var obj = {
    intvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    longvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    doublevalue: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    booleanvalue: jspb.Message.getFieldWithDefault(msg, 4, false),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valuetype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Value}
 */
proto.data.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Value;
  return proto.data.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Value}
 */
proto.data.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoublevalue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanvalue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 6:
      var value = /** @type {!proto.data.Value.ValueType} */ (reader.readEnum());
      msg.setValuetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntvalue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLongvalue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDoublevalue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getBooleanvalue();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValuetype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.data.Value.ValueType = {
  INTEGER: 0,
  LONG: 1,
  DOUBLE: 2,
  BOOLEAN: 3,
  STRING: 4,
  DATE: 5
};

/**
 * optional int32 intValue = 1;
 * @return {number}
 */
proto.data.Value.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.Value.prototype.setIntvalue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 longValue = 2;
 * @return {number}
 */
proto.data.Value.prototype.getLongvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.data.Value.prototype.setLongvalue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double doubleValue = 3;
 * @return {number}
 */
proto.data.Value.prototype.getDoublevalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.data.Value.prototype.setDoublevalue = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bool booleanValue = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.data.Value.prototype.getBooleanvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.data.Value.prototype.setBooleanvalue = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string stringValue = 5;
 * @return {string}
 */
proto.data.Value.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.Value.prototype.setStringvalue = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ValueType valueType = 6;
 * @return {!proto.data.Value.ValueType}
 */
proto.data.Value.prototype.getValuetype = function() {
  return /** @type {!proto.data.Value.ValueType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.data.Value.ValueType} value */
proto.data.Value.prototype.setValuetype = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ValueObjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ValueObjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ValueObjectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ValueObjectRequest.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    criteria: (f = msg.getCriteria()) && proto.data.Criteria.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ValueObjectRequest}
 */
proto.data.ValueObjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ValueObjectRequest;
  return proto.data.ValueObjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ValueObjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ValueObjectRequest}
 */
proto.data.ValueObjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 4:
      var value = new proto.data.Criteria;
      reader.readMessage(value,proto.data.Criteria.deserializeBinaryFromReader);
      msg.setCriteria(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ValueObjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ValueObjectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ValueObjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ValueObjectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getCriteria();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.data.Criteria.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.data.ValueObjectRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ValueObjectRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.data.ValueObjectRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ValueObjectRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ClientRequest clientRequest = 3;
 * @return {?proto.data.ClientRequest}
 */
proto.data.ValueObjectRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 3));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.ValueObjectRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ValueObjectRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ValueObjectRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Criteria criteria = 4;
 * @return {?proto.data.Criteria}
 */
proto.data.ValueObjectRequest.prototype.getCriteria = function() {
  return /** @type{?proto.data.Criteria} */ (
    jspb.Message.getWrapperField(this, proto.data.Criteria, 4));
};


/** @param {?proto.data.Criteria|undefined} value */
proto.data.ValueObjectRequest.prototype.setCriteria = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ValueObjectRequest.prototype.clearCriteria = function() {
  this.setCriteria(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ValueObjectRequest.prototype.hasCriteria = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.Criteria.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Criteria.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Criteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Criteria} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Criteria.toObject = function(includeInstance, msg) {
  var obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    whereclause: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderbyclause: jspb.Message.getFieldWithDefault(msg, 4, ""),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.data.Condition.toObject, includeInstance),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.data.Value.toObject, includeInstance),
    orderbycolumnList: jspb.Message.toObjectList(msg.getOrderbycolumnList(),
    proto.data.OrderByProperty.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Criteria}
 */
proto.data.Criteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Criteria;
  return proto.data.Criteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Criteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Criteria}
 */
proto.data.Criteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhereclause(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderbyclause(value);
      break;
    case 5:
      var value = new proto.data.Condition;
      reader.readMessage(value,proto.data.Condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    case 6:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 7:
      var value = new proto.data.OrderByProperty;
      reader.readMessage(value,proto.data.OrderByProperty.deserializeBinaryFromReader);
      msg.addOrderbycolumn(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Criteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Criteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Criteria} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Criteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWhereclause();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderbyclause();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.data.Condition.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getOrderbycolumnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.data.OrderByProperty.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.data.Criteria.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.data.Criteria.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string whereClause = 3;
 * @return {string}
 */
proto.data.Criteria.prototype.getWhereclause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setWhereclause = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string orderByClause = 4;
 * @return {string}
 */
proto.data.Criteria.prototype.getOrderbyclause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.Criteria.prototype.setOrderbyclause = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Condition conditions = 5;
 * @return {!Array<!proto.data.Condition>}
 */
proto.data.Criteria.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.data.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Condition, 5));
};


/** @param {!Array<!proto.data.Condition>} value */
proto.data.Criteria.prototype.setConditionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.data.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Condition}
 */
proto.data.Criteria.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.data.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Criteria.prototype.clearConditionsList = function() {
  this.setConditionsList([]);
};


/**
 * repeated Value values = 6;
 * @return {!Array<!proto.data.Value>}
 */
proto.data.Criteria.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.data.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Value, 6));
};


/** @param {!Array<!proto.data.Value>} value */
proto.data.Criteria.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.data.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Value}
 */
proto.data.Criteria.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.data.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Criteria.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * repeated OrderByProperty orderByColumn = 7;
 * @return {!Array<!proto.data.OrderByProperty>}
 */
proto.data.Criteria.prototype.getOrderbycolumnList = function() {
  return /** @type{!Array<!proto.data.OrderByProperty>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.OrderByProperty, 7));
};


/** @param {!Array<!proto.data.OrderByProperty>} value */
proto.data.Criteria.prototype.setOrderbycolumnList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.data.OrderByProperty=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.OrderByProperty}
 */
proto.data.Criteria.prototype.addOrderbycolumn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.data.OrderByProperty, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Criteria.prototype.clearOrderbycolumnList = function() {
  this.setOrderbycolumnList([]);
};


/**
 * optional int64 limit = 8;
 * @return {number}
 */
proto.data.Criteria.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.data.Criteria.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.OrderByProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.data.OrderByProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.OrderByProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.OrderByProperty.toObject = function(includeInstance, msg) {
  var obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ordertype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.OrderByProperty}
 */
proto.data.OrderByProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.OrderByProperty;
  return proto.data.OrderByProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.OrderByProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.OrderByProperty}
 */
proto.data.OrderByProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 2:
      var value = /** @type {!proto.data.OrderByProperty.OrderType} */ (reader.readEnum());
      msg.setOrdertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.OrderByProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.OrderByProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.OrderByProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.OrderByProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrdertype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.data.OrderByProperty.OrderType = {
  ASCENDING: 0,
  DESCENDING: 1
};

/**
 * optional string columnName = 1;
 * @return {string}
 */
proto.data.OrderByProperty.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.OrderByProperty.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OrderType orderType = 2;
 * @return {!proto.data.OrderByProperty.OrderType}
 */
proto.data.OrderByProperty.prototype.getOrdertype = function() {
  return /** @type {!proto.data.OrderByProperty.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.data.OrderByProperty.OrderType} value */
proto.data.OrderByProperty.prototype.setOrdertype = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.Condition.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Condition.toObject = function(includeInstance, msg) {
  var obj = {
    value: (f = msg.getValue()) && proto.data.Value.toObject(includeInstance, f),
    valueto: (f = msg.getValueto()) && proto.data.Value.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.data.Value.toObject, includeInstance),
    operator: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Condition}
 */
proto.data.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Condition;
  return proto.data.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Condition}
 */
proto.data.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValueto(value);
      break;
    case 3:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 4:
      var value = /** @type {!proto.data.Condition.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getValueto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.data.Condition.Operator = {
  EQUAL: 0,
  NOT_EQUAL: 1,
  LIKE: 2,
  NOT_LIKE: 3,
  GREATER: 4,
  GREATER_EQUAL: 5,
  LESS: 6,
  LESS_EQUAL: 7,
  BETWEEN: 8,
  NOT_NULL: 9,
  NULL: 10,
  IN: 11,
  NOT_IN: 12
};

/**
 * optional Value value = 1;
 * @return {?proto.data.Value}
 */
proto.data.Condition.prototype.getValue = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 1));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.Condition.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Condition.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Condition.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value valueTo = 2;
 * @return {?proto.data.Value}
 */
proto.data.Condition.prototype.getValueto = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 2));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.Condition.prototype.setValueto = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.Condition.prototype.clearValueto = function() {
  this.setValueto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.Condition.prototype.hasValueto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Value values = 3;
 * @return {!Array<!proto.data.Value>}
 */
proto.data.Condition.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.data.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Value, 3));
};


/** @param {!Array<!proto.data.Value>} value */
proto.data.Condition.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.data.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Value}
 */
proto.data.Condition.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.data.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.Condition.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * optional Operator operator = 4;
 * @return {!proto.data.Condition.Operator}
 */
proto.data.Condition.prototype.getOperator = function() {
  return /** @type {!proto.data.Condition.Operator} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.data.Condition.Operator} value */
proto.data.Condition.prototype.setOperator = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.CalloutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.CalloutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.CalloutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.CalloutRequest.toObject = function(includeInstance, msg) {
  var obj = {
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    callout: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valueobject: (f = msg.getValueobject()) && proto.data.ValueObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.CalloutRequest}
 */
proto.data.CalloutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.CalloutRequest;
  return proto.data.CalloutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.CalloutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.CalloutRequest}
 */
proto.data.CalloutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallout(value);
      break;
    case 3:
      var value = new proto.data.ValueObject;
      reader.readMessage(value,proto.data.ValueObject.deserializeBinaryFromReader);
      msg.setValueobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.CalloutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.CalloutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.CalloutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.CalloutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getCallout();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValueobject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.data.ValueObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientRequest clientRequest = 1;
 * @return {?proto.data.ClientRequest}
 */
proto.data.CalloutRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 1));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.CalloutRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.CalloutRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.CalloutRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string callout = 2;
 * @return {string}
 */
proto.data.CalloutRequest.prototype.getCallout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.CalloutRequest.prototype.setCallout = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ValueObject valueObject = 3;
 * @return {?proto.data.ValueObject}
 */
proto.data.CalloutRequest.prototype.getValueobject = function() {
  return /** @type{?proto.data.ValueObject} */ (
    jspb.Message.getWrapperField(this, proto.data.ValueObject, 3));
};


/** @param {?proto.data.ValueObject|undefined} value */
proto.data.CalloutRequest.prototype.setValueobject = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.CalloutRequest.prototype.clearValueobject = function() {
  this.setValueobject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.CalloutRequest.prototype.hasValueobject = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.CalloutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data.CalloutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.CalloutResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.CalloutResponse.toObject = function(includeInstance, msg) {
  var obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, ""),
    values: (f = msg.getValues()) && proto.data.ValueObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.CalloutResponse}
 */
proto.data.CalloutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.CalloutResponse;
  return proto.data.CalloutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.CalloutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.CalloutResponse}
 */
proto.data.CalloutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 2:
      var value = new proto.data.ValueObject;
      reader.readMessage(value,proto.data.ValueObject.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.CalloutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.CalloutResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.CalloutResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.CalloutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.data.ValueObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.data.CalloutResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.CalloutResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ValueObject values = 2;
 * @return {?proto.data.ValueObject}
 */
proto.data.CalloutResponse.prototype.getValues = function() {
  return /** @type{?proto.data.ValueObject} */ (
    jspb.Message.getWrapperField(this, proto.data.ValueObject, 2));
};


/** @param {?proto.data.ValueObject|undefined} value */
proto.data.CalloutResponse.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.CalloutResponse.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.CalloutResponse.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ProcessRequest.repeatedFields_ = [7,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessRequest.toObject = function(includeInstance, msg) {
  var obj = {
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tableid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    recordid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tableselectedid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reportexporttype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    selectionsList: jspb.Message.toObjectList(msg.getSelectionsList(),
    proto.data.Selection.toObject, includeInstance),
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : [],
    populatedparametersList: jspb.Message.toObjectList(msg.getPopulatedparametersList(),
    proto.data.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessRequest}
 */
proto.data.ProcessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessRequest;
  return proto.data.ProcessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessRequest}
 */
proto.data.ProcessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTableid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecordid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTableselectedid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportexporttype(value);
      break;
    case 7:
      var value = new proto.data.Selection;
      reader.readMessage(value,proto.data.Selection.deserializeBinaryFromReader);
      msg.addSelections(value);
      break;
    case 8:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    case 9:
      var value = new proto.data.KeyValue;
      reader.readMessage(value,proto.data.KeyValue.deserializeBinaryFromReader);
      msg.addPopulatedparameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTableid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRecordid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTableselectedid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getReportexporttype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSelectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.data.Selection.serializeBinaryToWriter
    );
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
  f = message.getPopulatedparametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.data.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientRequest clientRequest = 1;
 * @return {?proto.data.ClientRequest}
 */
proto.data.ProcessRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 1));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.ProcessRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProcessRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProcessRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.data.ProcessRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ProcessRequest.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 tableId = 3;
 * @return {number}
 */
proto.data.ProcessRequest.prototype.getTableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.data.ProcessRequest.prototype.setTableid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 recordId = 4;
 * @return {number}
 */
proto.data.ProcessRequest.prototype.getRecordid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.data.ProcessRequest.prototype.setRecordid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 tableSelectedId = 5;
 * @return {number}
 */
proto.data.ProcessRequest.prototype.getTableselectedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.data.ProcessRequest.prototype.setTableselectedid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string reportExportType = 6;
 * @return {string}
 */
proto.data.ProcessRequest.prototype.getReportexporttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.data.ProcessRequest.prototype.setReportexporttype = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Selection selections = 7;
 * @return {!Array<!proto.data.Selection>}
 */
proto.data.ProcessRequest.prototype.getSelectionsList = function() {
  return /** @type{!Array<!proto.data.Selection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.Selection, 7));
};


/** @param {!Array<!proto.data.Selection>} value */
proto.data.ProcessRequest.prototype.setSelectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.data.Selection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.Selection}
 */
proto.data.ProcessRequest.prototype.addSelections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.data.Selection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ProcessRequest.prototype.clearSelectionsList = function() {
  this.setSelectionsList([]);
};


/**
 * map<string, Value> parameters = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.ProcessRequest.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.ProcessRequest.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};


/**
 * repeated KeyValue populatedParameters = 9;
 * @return {!Array<!proto.data.KeyValue>}
 */
proto.data.ProcessRequest.prototype.getPopulatedparametersList = function() {
  return /** @type{!Array<!proto.data.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.KeyValue, 9));
};


/** @param {!Array<!proto.data.KeyValue>} value */
proto.data.ProcessRequest.prototype.setPopulatedparametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.data.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.KeyValue}
 */
proto.data.ProcessRequest.prototype.addPopulatedparameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.data.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ProcessRequest.prototype.clearPopulatedparametersList = function() {
  this.setPopulatedparametersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessRequestParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessRequestParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessRequestParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessRequestParameter.toObject = function(includeInstance, msg) {
  var obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.data.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessRequestParameter}
 */
proto.data.ProcessRequestParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessRequestParameter;
  return proto.data.ProcessRequestParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessRequestParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessRequestParameter}
 */
proto.data.ProcessRequestParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 2:
      var value = new proto.data.Value;
      reader.readMessage(value,proto.data.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessRequestParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessRequestParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessRequestParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessRequestParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.data.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string columnName = 1;
 * @return {string}
 */
proto.data.ProcessRequestParameter.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ProcessRequestParameter.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {?proto.data.Value}
 */
proto.data.ProcessRequestParameter.prototype.getValue = function() {
  return /** @type{?proto.data.Value} */ (
    jspb.Message.getWrapperField(this, proto.data.Value, 2));
};


/** @param {?proto.data.Value|undefined} value */
proto.data.ProcessRequestParameter.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProcessRequestParameter.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProcessRequestParameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessActivityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessActivityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessActivityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessActivityRequest.toObject = function(includeInstance, msg) {
  var obj = {
    clientrequest: (f = msg.getClientrequest()) && proto.data.ClientRequest.toObject(includeInstance, f),
    useruuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessActivityRequest}
 */
proto.data.ProcessActivityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessActivityRequest;
  return proto.data.ProcessActivityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessActivityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessActivityRequest}
 */
proto.data.ProcessActivityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.data.ClientRequest;
      reader.readMessage(value,proto.data.ClientRequest.deserializeBinaryFromReader);
      msg.setClientrequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUseruuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessActivityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessActivityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessActivityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessActivityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.data.ClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getUseruuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ClientRequest clientRequest = 1;
 * @return {?proto.data.ClientRequest}
 */
proto.data.ProcessActivityRequest.prototype.getClientrequest = function() {
  return /** @type{?proto.data.ClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.data.ClientRequest, 1));
};


/** @param {?proto.data.ClientRequest|undefined} value */
proto.data.ProcessActivityRequest.prototype.setClientrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProcessActivityRequest.prototype.clearClientrequest = function() {
  this.setClientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProcessActivityRequest.prototype.hasClientrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string userUuid = 2;
 * @return {string}
 */
proto.data.ProcessActivityRequest.prototype.getUseruuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ProcessActivityRequest.prototype.setUseruuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.Selection.prototype.toObject = function(opt_includeInstance) {
  return proto.data.Selection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.Selection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Selection.toObject = function(includeInstance, msg) {
  var obj = {
    selectionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.Selection}
 */
proto.data.Selection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.Selection;
  return proto.data.Selection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.Selection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.Selection}
 */
proto.data.Selection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelectionid(value);
      break;
    case 7:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.Selection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.Selection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.Selection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.Selection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
};


/**
 * optional int32 selectionId = 1;
 * @return {number}
 */
proto.data.Selection.prototype.getSelectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.Selection.prototype.setSelectionid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, Value> values = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.Selection.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.Selection.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ProcessResponseList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessResponseList.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessResponseList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessResponseList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessResponseList.toObject = function(includeInstance, msg) {
  var obj = {
    recordcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    responsesList: jspb.Message.toObjectList(msg.getResponsesList(),
    proto.data.ProcessResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessResponseList}
 */
proto.data.ProcessResponseList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessResponseList;
  return proto.data.ProcessResponseList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessResponseList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessResponseList}
 */
proto.data.ProcessResponseList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordcount(value);
      break;
    case 2:
      var value = new proto.data.ProcessResponse;
      reader.readMessage(value,proto.data.ProcessResponse.deserializeBinaryFromReader);
      msg.addResponses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessResponseList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessResponseList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessResponseList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessResponseList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordcount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.data.ProcessResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 recordCount = 1;
 * @return {number}
 */
proto.data.ProcessResponseList.prototype.getRecordcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ProcessResponseList.prototype.setRecordcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ProcessResponse responses = 2;
 * @return {!Array<!proto.data.ProcessResponse>}
 */
proto.data.ProcessResponseList.prototype.getResponsesList = function() {
  return /** @type{!Array<!proto.data.ProcessResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.ProcessResponse, 2));
};


/** @param {!Array<!proto.data.ProcessResponse>} value */
proto.data.ProcessResponseList.prototype.setResponsesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.data.ProcessResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.ProcessResponse}
 */
proto.data.ProcessResponseList.prototype.addResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.data.ProcessResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ProcessResponseList.prototype.clearResponsesList = function() {
  this.setResponsesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.data.ProcessResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessResponse.toObject = function(includeInstance, msg) {
  var obj = {
    instanceuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    iserror: jspb.Message.getFieldWithDefault(msg, 2, false),
    summary: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resulttableid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isprocessing: jspb.Message.getFieldWithDefault(msg, 5, false),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.data.ProcessInfoLog.toObject, includeInstance),
    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, proto.data.Value.toObject) : [],
    output: (f = msg.getOutput()) && proto.data.ProcessOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessResponse}
 */
proto.data.ProcessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessResponse;
  return proto.data.ProcessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessResponse}
 */
proto.data.ProcessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceuuid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIserror(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSummary(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResulttableid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsprocessing(value);
      break;
    case 6:
      var value = new proto.data.ProcessInfoLog;
      reader.readMessage(value,proto.data.ProcessInfoLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 7:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.data.Value.deserializeBinaryFromReader, "");
         });
      break;
    case 8:
      var value = new proto.data.ProcessOutput;
      reader.readMessage(value,proto.data.ProcessOutput.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstanceuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIserror();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSummary();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResulttableid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsprocessing();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.data.ProcessInfoLog.serializeBinaryToWriter
    );
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.data.Value.serializeBinaryToWriter);
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.data.ProcessOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional string instanceUuid = 1;
 * @return {string}
 */
proto.data.ProcessResponse.prototype.getInstanceuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ProcessResponse.prototype.setInstanceuuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isError = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.data.ProcessResponse.prototype.getIserror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.data.ProcessResponse.prototype.setIserror = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string summary = 3;
 * @return {string}
 */
proto.data.ProcessResponse.prototype.getSummary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ProcessResponse.prototype.setSummary = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 resultTableId = 4;
 * @return {number}
 */
proto.data.ProcessResponse.prototype.getResulttableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.data.ProcessResponse.prototype.setResulttableid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool isProcessing = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.data.ProcessResponse.prototype.getIsprocessing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.data.ProcessResponse.prototype.setIsprocessing = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated ProcessInfoLog logs = 6;
 * @return {!Array<!proto.data.ProcessInfoLog>}
 */
proto.data.ProcessResponse.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.data.ProcessInfoLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.data.ProcessInfoLog, 6));
};


/** @param {!Array<!proto.data.ProcessInfoLog>} value */
proto.data.ProcessResponse.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.data.ProcessInfoLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.data.ProcessInfoLog}
 */
proto.data.ProcessResponse.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.data.ProcessInfoLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.data.ProcessResponse.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * map<string, Value> parameters = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.data.Value>}
 */
proto.data.ProcessResponse.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.data.Value>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.data.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.data.ProcessResponse.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};


/**
 * optional ProcessOutput output = 8;
 * @return {?proto.data.ProcessOutput}
 */
proto.data.ProcessResponse.prototype.getOutput = function() {
  return /** @type{?proto.data.ProcessOutput} */ (
    jspb.Message.getWrapperField(this, proto.data.ProcessOutput, 8));
};


/** @param {?proto.data.ProcessOutput|undefined} value */
proto.data.ProcessResponse.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.data.ProcessResponse.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.data.ProcessResponse.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessInfoLog.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessInfoLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessInfoLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessInfoLog.toObject = function(includeInstance, msg) {
  var obj = {
    recordid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    log: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessInfoLog}
 */
proto.data.ProcessInfoLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessInfoLog;
  return proto.data.ProcessInfoLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessInfoLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessInfoLog}
 */
proto.data.ProcessInfoLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecordid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessInfoLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessInfoLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessInfoLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessInfoLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 recordId = 1;
 * @return {number}
 */
proto.data.ProcessInfoLog.prototype.getRecordid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.data.ProcessInfoLog.prototype.setRecordid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string log = 2;
 * @return {string}
 */
proto.data.ProcessInfoLog.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ProcessInfoLog.prototype.setLog = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data.ProcessOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.data.ProcessOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data.ProcessOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessOutput.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    output: jspb.Message.getFieldWithDefault(msg, 5, ""),
    outputstream: msg.getOutputstream_asB64(),
    reportexporttype: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data.ProcessOutput}
 */
proto.data.ProcessOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data.ProcessOutput;
  return proto.data.ProcessOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data.ProcessOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data.ProcessOutput}
 */
proto.data.ProcessOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutputstream(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportexporttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data.ProcessOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data.ProcessOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data.ProcessOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data.ProcessOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOutputstream_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getReportexporttype();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.data.ProcessOutput.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.data.ProcessOutput.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.data.ProcessOutput.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fileName = 4;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.data.ProcessOutput.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string output = 5;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.data.ProcessOutput.prototype.setOutput = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes outputStream = 6;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getOutputstream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes outputStream = 6;
 * This is a type-conversion wrapper around `getOutputstream()`
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getOutputstream_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutputstream()));
};


/**
 * optional bytes outputStream = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputstream()`
 * @return {!Uint8Array}
 */
proto.data.ProcessOutput.prototype.getOutputstream_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutputstream()));
};


/** @param {!(string|Uint8Array)} value */
proto.data.ProcessOutput.prototype.setOutputstream = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string reportExportType = 7;
 * @return {string}
 */
proto.data.ProcessOutput.prototype.getReportexporttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.data.ProcessOutput.prototype.setReportexporttype = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


goog.object.extend(exports, proto.data);
